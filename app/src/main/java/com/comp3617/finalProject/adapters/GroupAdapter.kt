package com.comp3617.finalProject.adapters

import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.cardview.widget.CardView
import androidx.navigation.findNavController
import androidx.recyclerview.widget.RecyclerView
import com.comp3617.finalProject.App
import com.comp3617.finalProject.R
import com.comp3617.finalProject.models.Group
import com.comp3617.finalProject.ui.fragments.dialogs.DialogDeleteConfirm
import com.comp3617.finalProject.ui.MainActivity

/**
 * GroupAdapter. Groups can be deleted by long-clicking it.
 */
class GroupAdapter(private val activity: AppCompatActivity, groups: MutableList<Group>) : RecyclerView.Adapter<GroupAdapter.MyViewHolder>() {
    var mData = groups

    class MyViewHolder(activity: AppCompatActivity, view: View, mAdapter: GroupAdapter) : RecyclerView.ViewHolder(view) {
        private val vm = (activity as MainActivity).mMainActivityViewModel
        val cardView: CardView = view.findViewById(R.id.id_cardView_group)
        val titles: TextView = view.findViewById(R.id.id_title_group)

        init {
            cardView.setOnClickListener {
                val group = this.cardView.getTag(R.string.s_object) as Group
//                Log.d("test", "clicked group, id: ${group.groupId},   $group")
                vm.currentGroupId = group.groupId //saves the id of the clicked group into VM
                vm.innerGroup = group.parentGroupId != 0L //set the innerGroup Boolean true if clicked group is an innerGroup
                //Displays Groups/////////////
                vm.setChildGroups()
                if (vm.innerGroup) {
//                    Log.d("test", "inner group")
                    //find Blocks that do not belong to any MDate, but belongs to currently clicked group
                    //When inner group is clicked, clear Blocks
                    vm.setBlocks(0)
                } else {
                    //saves the top group Id
                    vm.topGroupId = vm.currentGroupId
                    //get date cards at the top if the clicked group has no parent//////////
                    vm.setDates(vm.currentGroupId!!)
                    vm.mBlocks.value = mutableListOf()
                    Thread {
                        //find the Id of the first MDate belonging to the clicked group
                        val dateId = App.getDB().db.mDateDao().findOneByParentGroupId(group.groupId)
                        vm.setBlocks(dateId)
                        vm.currentMDateId = dateId  //sets current date , selects first date for the user
                    }.start()
                }
                activity.findNavController(R.id.display_host_fragment).navigate(R.id.action_displayFragment_self)
            }

            cardView.setOnLongClickListener {
                Log.d("test", "Long clicked: ${this.titles.text}")
                DialogDeleteConfirm(mAdapter.mData, adapterPosition).show(activity.supportFragmentManager, "DeleteTaskFragment")
                return@setOnLongClickListener true
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.views_group, parent, false)
        return MyViewHolder(activity, view, this)
    }

    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
        val group = mData[position]
        holder.titles.text = group.title
        holder.itemView.findViewById<TextView>(R.id.id_groupDate).text = group.date
        Thread {
            //the group id in mData can be 0 if it's newly added by user, and id is not auto-generated by database yet
            val groupInDB = (activity as MainActivity).mMainActivityViewModel.findGroupByAttributes(group)
            //pass the whole object in the tag. This is needed in ItemHelperSWipeFlag to detect
            //object type in order to trigger swipe or not
            holder.cardView.setTag(R.string.s_object, groupInDB)
        }.start()
    }

    override fun getItemCount(): Int {
        return mData.size
    }
}